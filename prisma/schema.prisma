// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String? @db.Uuid
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  name          String?
  posts         Post[]
  invoices      Invoice[]
  subscriptions Subscription[]
}

model Invoice {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.Uuid
  amount   Float
  status   String
  issuedAt DateTime  @default(now())
  paidAt   DateTime?
}

model Subscription {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid
  plan      String
  startedAt DateTime  @default(now())
  expiresAt DateTime?
  isActive  Boolean   @default(true)
}

model TestUsers {
  name     String
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String
  password String
}

model SessionData {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  expiresAt String
}

model Profile {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email   String
  clerkId String @unique
}
